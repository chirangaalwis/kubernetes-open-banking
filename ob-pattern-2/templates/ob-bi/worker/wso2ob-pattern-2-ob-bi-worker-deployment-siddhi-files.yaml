# Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "ob-pattern-2.resource.prefix" . }}-ob-bi-worker-deployment-siddhi-files
  namespace : {{ .Release.Namespace }}
data:
  FraudStatusUpdaterApp.siddhi: |-
    /**
     * Copyright (c) 2018, WSO2 Inc. (http://www.wso2.com). All Rights Reserved.
     *
     * This software is the property of WSO2 Inc. and its suppliers, if any.
     * Dissemination of any information or reproduction of any material contained
     * herein is strictly forbidden, unless permitted by WSO2 in accordance with
     * the WSO2 Commercial License available at http://wso2.com/licenses. For specific
     * language governing the permissions and limitations under this license,
     * please see the license as well as any agreement you've entered into with
     * WSO2 governing the purchase of this software and any associated services.
     **/
    @App:name("FraudStatusUpdaterApp")

    @Source(type = 'http',
            receiver.url='http://0.0.0.0:8006/FraudStatusUpdaterApp/FraudStatusUpdaterStream',
            basic.auth.enabled='false',
            @map(type='json'))
    define stream FraudStatusUpdaterStream (consentId string, analystId string, option int);
    /*
    option
    0 = not fraudulent
    1 = fraudulent
    */

    --Store event data to database

    @primaryKey('ID', 'TIMESTAMP')
    @index('CONSENT_ID', 'TIMESTAMP')
    @store(type='rdbms', datasource='OB_REPORTING_DB')
    define table PAYMENTS_RAW_DATA(ID string,CONSENT_ID string,USER_ID string,TPP_ID string,CLIENT_ID string,CREDITOR_ACCOUNT_ID string,
                            DEBTOR_ACCOUNT_ID string,MULTI_AUTHORISATION bool,PAYMENT_TYPE string,CURRENCY string,
                            NO_OF_TRANSACTIONS string,LOCAL_INSTRUMENT string,AMOUNT string,PAYMENT_SUBMISSION_ID string,
                            TIMESTAMP long,TRA_DECISION bool, EXEMPTION string, IS_FRAUD bool, MULTI_AUTH_USERS_COUNT int,API_SPEC_VERSION string);

    @primaryKey('consentId')
    @store(type='rdbms', datasource='OB_REPORTING_DB')
    define table FraudulentTransactionData(consentId string, analystId string, timestamp long, status int);

    @info(name='updateTransactionHistoryTable')
    from FraudStatusUpdaterStream
    select consentId, option as status
    update PAYMENTS_RAW_DATA
    set PAYMENTS_RAW_DATA.IS_FRAUD = status
    on PAYMENTS_RAW_DATA.CONSENT_ID == consentId;

    @info(name='insertToFraudulentTransactionDataTable')
    from FraudStatusUpdaterStream [option == 1]
    select consentId, analystId, eventTimestamp() as timestamp, option as status
    update or insert into FraudulentTransactionData
    set FraudulentTransactionData.timestamp = timestamp, FraudulentTransactionData.analystId = analystId, FraudulentTransactionData.status = status
    on FraudulentTransactionData.consentId == consentId;

    @info(name='updateFraudulentTransactionDataTable')
    from FraudStatusUpdaterStream [option == 0]
    select consentId, option as status
    update FraudulentTransactionData
    set FraudulentTransactionData.status = status
    on FraudulentTransactionData.consentId == consentId;
  TRAAccountValidationApp.siddhi: |-
    /**
     * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.com). All Rights Reserved.
     *
     * This software is the property of WSO2 Inc. and its suppliers, if any.
     * Dissemination of any information or reproduction of any material contained
     * herein is strictly forbidden, unless permitted by WSO2 in accordance with
     * the WSO2 Commercial License available at http://wso2.com/licenses. For specific
     * language governing the permissions and limitations under this license,
     * please see the license as well as any agreement you've entered into with
     * WSO2 governing the purchase of this software and any associated services.
     **/
    @App:name("TRAAccountValidationApp")

    @App:description('Receive events via HTTP transport and view the output on the console')

    @Source(type = 'http-request',
            source.id='source',
            receiver.url='http://0.0.0.0:8007/TRAAccountValidationApp/TRAValidationStream',
            basic.auth.enabled='false',
            @map(type = 'json',@attributes(MESSAGE_ID='trp:messageId',TPP_ID='$.event.userId',CONSENT_ID='$.event.consentId',
            TIMESTAMP='$.event.timestamp', TYPE='$.event.type', DEPLOYED_SPEC='$.event.DeployedSpec',
            LAST_SCA_TIME_LIMIT='$.event.TimePeriodOfLastSCAApplied', FIRST_ACCESS_HISTORY_LIMIT = '$.event.FirstAccessHistoryLimit')))
    define stream TRAValidationStream (MESSAGE_ID string, TPP_ID string, CONSENT_ID string, TIMESTAMP long, TYPE string,
                             DEPLOYED_SPEC string, LAST_SCA_TIME_LIMIT int, FIRST_ACCESS_HISTORY_LIMIT int);

    @sink(type = 'inMemory', topic = 'traAccountData',@map(type = 'passThrough'))
    define stream TRAAccountDataStream (TPP_ID string, MESSAGE_ID string, CONSENT_ID string, CLIENT_ID string,
    CURRENT_TIMESTAMP long, TYPE string, TRA_APPLICABLE bool, LAST_SCA_TIME_LIMIT int);
    --messageId string,

    @primaryKey('ID','TIMESTAMP')
    @store(type='rdbms', datasource='OB_REPORTING_DB')
    define table ACCOUNTS_RAW_DATA(ID string,CONSENT_ID string,USER_ID string,TPP_ID string,CLIENT_ID string,ACCOUNT_ID string,
                            RE_AUTHORISATION bool,TIMESTAMP long,TRA_DECISION bool,EXEMPTION string,IS_FRAUD bool,API_SPEC_VERSION string);

    @primaryKey('ID')
    @store(type='rdbms', datasource='OPEN_BANKING_DB')
    define table UK_ACCOUNT_INITIATION(ID string,REQUEST string,CREATED_TIMESTAMP string,STATUS string,CLIENT_ID string,
                            STATUS_UPDATED_TIMESTAMP string,SPEC_VERSION string);

    @primaryKey('CONSENT_ID')
    @store(type='rdbms', datasource='OPEN_BANKING_DB')
    define table BG_ACCOUNT_BINDING(CONSENT_ID string,ACCOUNT_CONSENT string,RECURRING_INDICATOR bool,
                            COMBINED_SERVICE_INDICATOR bool,ACCOUNT_PERMISSIONS string);

    define function getArrayLength[JavaScript] return int {
        if(data[0]) {
            var jsonArray = JSON.parse(data[0]);
       	    return jsonArray.length;
        } else {
      	    return 0;
        }
    };

    from TRAValidationStream [DEPLOYED_SPEC == "UK"]
    select *
    insert into UkAccountConfigDataStream;

    from UK_ACCOUNT_INITIATION as a
        join UkAccountConfigDataStream as v
        on a.ID == v.CONSENT_ID
    select v.TPP_ID, v.MESSAGE_ID, v.CONSENT_ID, v.TIMESTAMP, a.REQUEST, v.TYPE, v.DEPLOYED_SPEC, v.LAST_SCA_TIME_LIMIT
    insert into UkAccountDataStream;

    from UkAccountDataStream
    select TPP_ID, MESSAGE_ID, CONSENT_ID, TIMESTAMP, json:getString(REQUEST,'$.accountData.permissions') as PERMISSION_LIST,
                            json:getString(REQUEST, '$.accountData.transactionFromDateTime') as TRANSACTION_FROM_DATE_TIME,
                            json:getString(REQUEST, '$.accountData.expirationDateTime') as EXPIRATION_DATE_TIME, TYPE,
                            LAST_SCA_TIME_LIMIT
    insert into UkAccountPermissionDataStream;

    from UkAccountPermissionDataStream
    select TPP_ID, MESSAGE_ID, CONSENT_ID, TIMESTAMP, PERMISSION_LIST, getArrayLength(PERMISSION_LIST) as size,
                            TRANSACTION_FROM_DATE_TIME, EXPIRATION_DATE_TIME, TYPE, LAST_SCA_TIME_LIMIT
    insert into UkAccountDataWithElementCountStream;

    from UkAccountDataWithElementCountStream [size == 2]
    select TPP_ID, MESSAGE_ID, CONSENT_ID, TIMESTAMP, ifThenElse(str:contains(PERMISSION_LIST,"READBALANCES") and
                        (str:contains(PERMISSION_LIST,"READACCOUNTSBASIC") or str:contains(PERMISSION_LIST,"READACCOUNTSDETAIL")), true, false)
                            as TRA_APPLICABLE, TRANSACTION_FROM_DATE_TIME, EXPIRATION_DATE_TIME, TYPE, LAST_SCA_TIME_LIMIT
    insert into UkAccountValidationStream;

    from UkAccountDataWithElementCountStream [size == 3]
    select TPP_ID, MESSAGE_ID, CONSENT_ID, TIMESTAMP, ifThenElse(str:contains(PERMISSION_LIST,"READBALANCES") and
                        str:contains(PERMISSION_LIST,"READACCOUNTSBASIC") and str:contains(PERMISSION_LIST,"READACCOUNTSDETAIL"), true, false)
                            as TRA_APPLICABLE, TRANSACTION_FROM_DATE_TIME, EXPIRATION_DATE_TIME, TYPE, LAST_SCA_TIME_LIMIT
    insert into UkAccountValidationStream;

    from UkAccountDataWithElementCountStream [size<=7]
    select TPP_ID, MESSAGE_ID, CONSENT_ID, TIMESTAMP, ifThenElse(
        (
            str:contains(PERMISSION_LIST,"READBENEFICIARIESDETAIL") or
            str:contains(PERMISSION_LIST,"READBENEFICIARIESBASIC") or
            str:contains(PERMISSION_LIST,"READDIRECTDEBITS") or
            str:contains(PERMISSION_LIST,"READOFFERS") or
            str:contains(PERMISSION_LIST,"READPAN") or
            str:contains(PERMISSION_LIST,"READPARTY") or
            str:contains(PERMISSION_LIST,"READPARTYPSU") or
            str:contains(PERMISSION_LIST,"READPRODUCTS") or
            str:contains(PERMISSION_LIST,"READSCHEDULEDPAYMENTSBASIC") or
            str:contains(PERMISSION_LIST,"READSCHEDULEDPAYMENTSDETAIL") or
            str:contains(PERMISSION_LIST,"READSTANDINGORDERSBASIC") or
            str:contains(PERMISSION_LIST,"READSTANDINGORDERSDETAIL") or
            str:contains(PERMISSION_LIST,"READSTATEMENTSBASIC") or
            str:contains(PERMISSION_LIST,"READSTATEMENTSDETAIL")
        ),
        false, true) as TRA_APPLICABLE, TRANSACTION_FROM_DATE_TIME, EXPIRATION_DATE_TIME, TYPE, LAST_SCA_TIME_LIMIT
    insert into UkAccountValidationStream;

    from UkAccountDataWithElementCountStream [size > 5]
    select TPP_ID,MESSAGE_ID,CONSENT_ID,TIMESTAMP,false as TRA_APPLICABLE,TRANSACTION_FROM_DATE_TIME,EXPIRATION_DATE_TIME,
                            TYPE, LAST_SCA_TIME_LIMIT
    insert into UkAccountValidationStream;

    @info(name='getUkAccountData')
    from UkAccountValidationStream as v join ACCOUNTS_RAW_DATA as a
    on a.CONSENT_ID == v.CONSENT_ID
    select v.TPP_ID, v.MESSAGE_ID, v.CONSENT_ID, a.CLIENT_ID, v.TIMESTAMP as CURRENT_TIMESTAMP,  v.TYPE, v.TRA_APPLICABLE,
                            v.LAST_SCA_TIME_LIMIT
    insert into TRAAccountDataStream;

    from TRAValidationStream [DEPLOYED_SPEC == "BERLIN"]
    select *
    insert into TempBerlinAccountDataStream;

    from TempBerlinAccountDataStream [FIRST_ACCESS_HISTORY_LIMIT >LAST_SCA_TIME_LIMIT]
    select TPP_ID, MESSAGE_ID, CONSENT_ID, "null" as CLIENT_ID, TIMESTAMP as CURRENT_TIMESTAMP, TYPE, false as TRA_APPLICABLE,
                                   LAST_SCA_TIME_LIMIT
    insert into TRAAccountDataStream;

    from TempBerlinAccountDataStream [FIRST_ACCESS_HISTORY_LIMIT <= LAST_SCA_TIME_LIMIT]
    select *
    insert into BerlinAccountConfigDataStream;

    from BG_ACCOUNT_BINDING as a
        join BerlinAccountConfigDataStream as v
        on a.CONSENT_ID == v.CONSENT_ID
    select v.TPP_ID,v.MESSAGE_ID,v.CONSENT_ID,v.TIMESTAMP,v.TYPE,v.DEPLOYED_SPEC,v.LAST_SCA_TIME_LIMIT,a.ACCOUNT_CONSENT
    insert into BerlinAccountDataStream;

    from BerlinAccountDataStream
    select TPP_ID, MESSAGE_ID, CONSENT_ID, TIMESTAMP, ifThenElse(json:isExists(ACCOUNT_CONSENT,"$.accounts"),json:getString(
                            ACCOUNT_CONSENT,'$.accounts'), "{}") as ACCOUNT_LIST, ifThenElse(json:isExists(ACCOUNT_CONSENT,"$.balances"),
                            json:getString(ACCOUNT_CONSENT,'$.balances'), "{}") as BALANCE_LIST, ifThenElse(json:isExists(ACCOUNT_CONSENT,"$.transactions"),
                            json:getString(ACCOUNT_CONSENT,'$.transactions'), "{}") as TRANSACTION_LIST, TYPE, LAST_SCA_TIME_LIMIT
    insert into BerlinAccountPermissionDataStream;

    from BerlinAccountPermissionDataStream
    select TPP_ID, MESSAGE_ID, CONSENT_ID, TIMESTAMP, ACCOUNT_LIST, ifThenElse(getArrayLength(ACCOUNT_LIST) is NULL, 0, getArrayLength(ACCOUNT_LIST))
                            as ACCOUNT_LIST_SIZE, BALANCE_LIST, ifThenElse(getArrayLength(BALANCE_LIST) is NULL, 0, getArrayLength(BALANCE_LIST)) as BALANCE_LIST_SIZE,
                            TRANSACTION_LIST, ifThenElse(getArrayLength(TRANSACTION_LIST) is NULL, 0, getArrayLength(TRANSACTION_LIST)) as TRANSACTION_LIST_SIZE,
                            TYPE, LAST_SCA_TIME_LIMIT
    insert into BerlinDataWithElementCountStream;

    from BerlinDataWithElementCountStream [ACCOUNT_LIST_SIZE == 0 and BALANCE_LIST_SIZE > 0 and TRANSACTION_LIST_SIZE == 0]
    select TPP_ID, MESSAGE_ID, CONSENT_ID, TIMESTAMP, true as TRA_APPLICABLE, TYPE, LAST_SCA_TIME_LIMIT
    insert into BerlinAccountValidationStream;

    from BerlinDataWithElementCountStream [ACCOUNT_LIST_SIZE == 0 and BALANCE_LIST_SIZE == 0 and TRANSACTION_LIST_SIZE == 0]
    select TPP_ID, MESSAGE_ID, CONSENT_ID, TIMESTAMP, false as TRA_APPLICABLE, TYPE, LAST_SCA_TIME_LIMIT
    insert into BerlinAccountValidationStream;

    from BerlinDataWithElementCountStream [ACCOUNT_LIST_SIZE > 0 or TRANSACTION_LIST_SIZE > 0]
    select TPP_ID, MESSAGE_ID, CONSENT_ID, TIMESTAMP, false as TRA_APPLICABLE, TYPE, LAST_SCA_TIME_LIMIT
    insert into BerlinAccountValidationStream;

    @info(name='getBerlinAccountData')
    from BerlinAccountValidationStream as v join ACCOUNTS_RAW_DATA as a
    on a.CONSENT_ID == v.CONSENT_ID
    select v.TPP_ID, v.MESSAGE_ID, v.CONSENT_ID, a.CLIENT_ID, v.TIMESTAMP as CURRENT_TIMESTAMP,  v.TYPE, v.TRA_APPLICABLE,
                            v.LAST_SCA_TIME_LIMIT
    insert into TRAAccountDataStream;
  TRAPaymentValidationApp.siddhi: |-
    /**
    * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.com). All Rights Reserved.
    *
    * This software is the property of WSO2 Inc. and its suppliers, if any.
    * Dissemination of any information or reproduction of any material contained
    * herein is strictly forbidden, unless permitted by WSO2 in accordance with
    * the WSO2 Commercial License available at http://wso2.com/licenses. For specific
    * language governing the permissions and limitations under this license,
    * please see the license as well as any agreement you've entered into with
    * WSO2 governing the purchase of this software and any associated services.
    **/

    @App:name("TRAPaymentValidationApp")

    @App:description('Receive events via HTTP transport and view the output on the console')

    @Source(type = 'http-request',
         source.id='source',
         receiver.url='http://0.0.0.0:8007/TRAPaymentValidationApp/TRAValidationStream',
         basic.auth.enabled='false',
         @map(type = 'json',@attributes(MESSAGE_ID='trp:messageId',TIMESTAMP='event.timestamp',USER_ID='event.userId',
         CONSENT_ID='event.consentId', TYPE='$.event.type', DEPLOYED_SPEC='$.event.DeployedSpec',
         RECURRING_PAYMENT_TIME='$.event.recurringPaymentTime',MAX_FREQ_WITHOUT_SCA='$.event.maxFreqWithoutSCA',
         TOTAL_AMOUNT_WITHOUT_SCA='$.event.totalAmountWithoutSCA', MAX_TRANSACTION_AMOUNT='$.event.MaxTransactionAmount')))
    define stream TRAValidationStream (MESSAGE_ID string, TIMESTAMP long, USER_ID string, CONSENT_ID string, TYPE string,
                            DEPLOYED_SPEC string, RECURRING_PAYMENT_TIME int, MAX_FREQ_WITHOUT_SCA int,
                            TOTAL_AMOUNT_WITHOUT_SCA int, MAX_TRANSACTION_AMOUNT int);

    @sink(type = 'inMemory', topic = 'traPaymentData',@map(type = 'passThrough'))
    define stream TRAPaymentDataStream (USER_ID string, MESSAGE_ID string, CONSENT_ID string, CLIENT_ID string,
                            AMOUNT string, CURRENT_TIMESTAMP long, TYPE string, RECURRING_PAYMENT_TIME int,
                            MAX_FREQ_WITHOUT_SCA int, TOTAL_AMOUNT_WITHOUT_SCA int, MAX_TRANSACTION_AMOUNT int);

    @primaryKey('ID','TIMESTAMP')
    @store(type='rdbms', datasource='OB_REPORTING_DB')
    define table PAYMENTS_RAW_DATA(ID string,CONSENT_ID string,USER_ID string,TPP_ID string,CLIENT_ID string,CREDITOR_ACCOUNT_ID string,
                            DEBTOR_ACCOUNT_ID string,MULTI_AUTHORISATION bool,PAYMENT_TYPE string,CURRENCY string,
                            NO_OF_TRANSACTIONS string,LOCAL_INSTRUMENT string,AMOUNT string,PAYMENT_SUBMISSION_ID string,
                            TIMESTAMP long,TRA_DECISION bool, EXEMPTION string, IS_FRAUD bool, MULTI_AUTH_USERS_COUNT int,API_SPEC_VERSION string);

    @info(name='getTransactionData')
    from TRAValidationStream as v join PAYMENTS_RAW_DATA as t
    on t.CONSENT_ID == v.CONSENT_ID
    select v.USER_ID, v.MESSAGE_ID, v.CONSENT_ID, t.CLIENT_ID, t.AMOUNT, v.TIMESTAMP as CURRENT_TIMESTAMP, v.TYPE,
                            v.RECURRING_PAYMENT_TIME, v.MAX_FREQ_WITHOUT_SCA, v.TOTAL_AMOUNT_WITHOUT_SCA,
                            v.MAX_TRANSACTION_AMOUNT
    insert into TRAPaymentDataStream;
